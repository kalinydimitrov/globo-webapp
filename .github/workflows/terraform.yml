name: 'Terraform App Config'

on:
  push:
    branches: [ '**' ]
  
  pull_request:
    branches: [ '**' ]
  

env:
  TF_LOG: INFO
  TF_INPUT: false
  AWS_REGION: us-east-1
  TF_VAR_api_key_secret_id: ${{ secrets.API_KEY_SECRET_ID }}
  TF_VAR_ec2_role_name:     ${{ secrets.EC2_ROLE_NAME }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      TF_VAR_prefix:              globo
      TF_VAR_environment:         dev
      TF_VAR_billing_code:        "12345"
      TF_VAR_api_key:             "12345"
      TF_VAR_public_subnets:      '["subnet-031802bb7de7b4ca7", "subnet-0a4f9cc3a5dc65eab",  "subnet-0357664f622896874"]'
      TF_VAR_vpc_id:              vpc-0475646a07e5dffd5
      TF_VAR_playbook_repository: https://github.com/ned1313/ansible-playbook-nginx.git

    # Use the Bash shell regardless whether the GitHub Actions runner is 
    # ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        # working-directory: .

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Use repo secrets: Settings > Secrets and variables > Actions
    - name: Configure AWS credentials (keys)
      uses: aws-actions/configure-aws-credentials@v4
      with:
         aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region:            ${{ env.AWS_REGION }}

    # Install the preferred version of Terraform CLI of
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Run a terraform fmt for push
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    # Run a terraform validate
    # Run even if formatting fails
    - name: Terraform Validate
      id: validate
      if: (success() || failure())
      run: terraform validate

    # Run a terraform plan to create an execution plan
    - name: Terraform Plan
      run: terraform plan -no-color -out=tf.plan

    - name: Upload plan
      uses: actions/upload-artifact@v4
      with:
        name: tf-plan
        path: tf.plan

    - name: Terraform Apply
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: terraform apply -no-color -input=false tf.plan
